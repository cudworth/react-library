{"version":3,"sources":["Header/Header.js","InputForm/InputForm.js","Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","InputForm","props","data","title","author","pages","read","htmlFor","placeholder","name","type","value","onChange","e","handleChange","checked","onClick","preventDefault","onSubmit","Card","book","readValue","toggleRead","destroyBook","savedLibrary","JSON","parse","localStorage","getItem","App","useState","_","cloneDeep","library","setLibrary","useEffect","setItem","stringify","bookTemplate","setData","index","indexOf","prevLibrary","newLibrary","splice","persist","prevData","newData","target","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2ef58e6.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <h1>Reading List</h1>\n      <h2>Built with React for The Odin Project</h2>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './InputForm.css';\n\nfunction InputForm(props) {\n  /*\n  const [title, setTitle] = useState('');\n  const [author, setAuthor] = useState('');\n  const [pages, setPages] = useState('');\n  const [read, setRead] = useState(false);\n  */\n\n  const { title, author, pages, read } = props.data;\n\n  return (\n    <div className=\"InputForm\">\n      <form>\n        <div>\n          <div>\n            <label htmlFor=\"title\">Book Title</label>\n          </div>\n          <input\n            className=\"input-text\"\n            placeholder=\"A River Runs Through It\"\n            name=\"title\"\n            type=\"text\"\n            value={title}\n            onChange={(e) => props.handleChange(e)}\n          ></input>\n        </div>\n\n        <div>\n          <div>\n            <label htmlFor=\"author\">Author</label>\n          </div>\n          <input\n            className=\"input-text\"\n            placeholder=\"Norman Maclean\"\n            name=\"author\"\n            type=\"text\"\n            value={author}\n            onChange={(e) => props.handleChange(e)}\n          ></input>\n        </div>\n\n        <div>\n          <div>\n            <label htmlFor=\"pages\">Page Count</label>\n          </div>\n          <input\n            className=\"input-text\"\n            placeholder=\"238\"\n            name=\"pages\"\n            type=\"number\"\n            value={pages}\n            onChange={(e) => props.handleChange(e)}\n          ></input>\n        </div>\n\n        <div>\n          <span>\n            <label htmlFor=\"read\">Read</label>\n            <input\n              name=\"read\"\n              type=\"radio\"\n              value=\"read\"\n              checked={read === 'read'}\n              onChange={(e) => props.handleChange(e)}\n            ></input>\n          </span>\n\n          <span>\n            <label htmlFor=\"read\">Unread</label>\n            <input\n              name=\"read\"\n              type=\"radio\"\n              value=\"unread\"\n              checked={read === 'unread'}\n              onChange={(e) => props.handleChange(e)}\n            ></input>\n          </span>\n        </div>\n\n        <div>\n          <input\n            className=\"button\"\n            type=\"submit\"\n            value=\"Add Book\"\n            onClick={(e) => {\n              e.preventDefault();\n              props.onSubmit();\n            }}\n          ></input>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default InputForm;\n","import React from 'react';\nimport './Card.css';\n\nfunction Card(props) {\n  const { title, author, pages, read } = props.book;\n  const readValue = read === 'read' ? 'Mark Unread' : 'Mark Read';\n\n  return (\n    <div className=\"Card\">\n      <div>Title: {title}</div>\n      <div>Author: {author}</div>\n      <div>Pages: {pages}</div>\n      <div>{read === 'read' ? 'Read' : 'Unread'}</div>\n      <div className=\"Card-buttons\">\n        <input\n          className=\"button\"\n          type=\"button\"\n          value={readValue}\n          onClick={() => props.toggleRead(props.book)}\n        ></input>\n        <input\n          className=\"button\"\n          type=\"button\"\n          value=\"Delete\"\n          onClick={() => props.destroyBook(props.book)}\n        ></input>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { useState, useEffect } from 'react';\nimport './reset.css';\nimport './App.css';\nimport Header from './Header/Header';\nimport InputForm from './InputForm/InputForm';\nimport Card from './Card/Card';\n\nimport _ from 'lodash';\n\nconst savedLibrary = JSON.parse(localStorage.getItem('library'));\n\nfunction App() {\n  const [library, setLibrary] = useState(_.cloneDeep(savedLibrary) || []);\n\n  useEffect(() => {\n    localStorage.setItem('library', JSON.stringify(library));\n  }, [library]);\n\n  const bookTemplate = {\n    title: '',\n    author: '',\n    pages: '',\n    read: 'read',\n  };\n\n  const [data, setData] = useState(bookTemplate);\n\n  function handleChange(e) {\n    e.persist(); //Makes persistent event, otherwise synthetic event will be destroyed prior to asynchronous setData method completion\n    setData((prevData) => {\n      const newData = _.cloneDeep(prevData);\n      newData[e.target.name] = e.target.value;\n      return newData;\n    });\n  }\n\n  function createBook() {\n    setLibrary((library) => [...library, data]);\n    setData(bookTemplate);\n  }\n\n  function destroyBook(book) {\n    const index = library.indexOf(book);\n    setLibrary((prevLibrary) => {\n      const newLibrary = _.cloneDeep(prevLibrary);\n      newLibrary.splice(index, 1);\n      return newLibrary;\n    });\n  }\n\n  function toggleRead(book) {\n    const index = library.indexOf(book);\n    setLibrary((prevLibrary) => {\n      const newLibrary = _.cloneDeep(prevLibrary);\n      newLibrary[index].read =\n        newLibrary[index].read === 'unread' ? 'read' : 'unread';\n      return newLibrary;\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <InputForm\n        data={data}\n        handleChange={handleChange}\n        onSubmit={createBook}\n      />\n      <div className=\"card-cabinet\">\n        {library.map((book, index) => {\n          return (\n            <Card\n              key={index}\n              book={book}\n              destroyBook={destroyBook}\n              toggleRead={toggleRead}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}